{"version":3,"sources":["views/charts/MainChartExample.js","appstate/api.socket.js","views/dashboard/InitDashboard.js"],"names":["brandSuccess","getStyle","brandInfo","MainChartExample","attributes","random","min","max","Math","floor","defaultDatasets","data1","data2","data3","i","push","label","backgroundColor","hexToRgba","borderColor","pointHoverBackgroundColor","borderWidth","data","cnts","defaultOptions","maintainAspectRatio","legend","display","scales","xAxes","gridLines","drawOnChartArea","yAxes","ticks","beginAtZero","maxTicksLimit","stepSize","ceil","elements","point","radius","hitRadius","hoverRadius","hoverBorderWidth","datasets","options","labels","openSocket","WidgetsDropdown","lazy","InitDashboard","useState","timestamp","useEffect","makechart2","undefined","sd","map","dd","key","roi","dsc","pnm","cnt","pct","xs","md","xl","sm","color","className","tt","toString","toFixed","value","shape","id","style","height","marginTop"],"mappings":"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","file":"static/js/13.816ecfac.chunk.js","sourcesContent":["import React from 'react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils/src'\n\nconst brandSuccess = getStyle('success') || '#4dbd74'\nconst brandInfo = getStyle('info') || '#20a8d8'\nconst brandDanger = getStyle('danger') || '#f86c6b'\n\nconst MainChartExample = attributes => {\n  const random = (min, max)=>{\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n\n  const defaultDatasets = (()=>{\n    let elements = 27\n    const data1 = []\n    const data2 = []\n    const data3 = []\n    for (let i = 0; i <= elements; i++) {\n      data1.push(random(50, 200))\n      data2.push(random(80, 100))\n      data3.push(65)\n    }\n    return [\n      {\n        label: 'My First dataset',\n        backgroundColor: hexToRgba(brandInfo, 10),\n        borderColor: brandInfo,\n        pointHoverBackgroundColor: brandInfo,\n        borderWidth: 2,\n        data: attributes.data ? attributes.data.cnts : []\n      },\n      {\n        label: 'My Second dataset',\n        backgroundColor: 'transparent',\n        borderColor: brandSuccess,\n        pointHoverBackgroundColor: brandSuccess,\n        borderWidth: 2,\n        data: attributes.data ? attributes.data.cnts : []\n      },\n      // {\n      //   label: 'My Third dataset',\n      //   backgroundColor: 'transparent',\n      //   borderColor: brandDanger,\n      //   pointHoverBackgroundColor: brandDanger,\n      //   borderWidth: 1,\n      //   borderDash: [8, 5],\n      //   data: attributes.data ? attributes.data.cnts : []\n      // }\n    ]\n  })()\n\n  const defaultOptions = (()=>{\n    return {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            gridLines: {\n              drawOnChartArea: false\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              maxTicksLimit: 5,\n              stepSize: Math.ceil(250 / 5),\n              max: 250\n            },\n            gridLines: {\n              display: true\n            }\n          }]\n        },\n        elements: {\n          point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n            hoverBorderWidth: 3\n          }\n        }\n      }\n    }\n  )()\n\n  // render\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={ attributes.data ? attributes.data.labels : [] }\n    />\n  )\n}\n\n\nexport default MainChartExample\n","import openSocket from 'socket.io-client';\n// const  socket = openSocket('http://votes.loc:8000');\nconst  socket = openSocket('http://fhsvoting.com:8000');\n\nfunction subscribeToTimer(cb) {\n\n  socket.on('timer', timestamp => cb(null, timestamp));\n  socket.emit('subscribeToTimer', 300000);\n}\n\nexport { subscribeToTimer };\n","import React, { lazy,  useState, useEffect } from 'react'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CCallout\n} from '@coreui/react'\n\nimport MainChartExample from '../charts/MainChartExample.js'\nimport { subscribeToTimer } from '../../appstate/api.socket';\n\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\n// const WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\n\nconst InitDashboard = () => {\n  const [timestamp, setTimeStamp] = useState([])\n  // const [state, dispatch] = useContext(AppContext)\n\n\n  useEffect(() => {\n\n      //  subscribeToTimer((err, timestamp) => setTimeStamp(timestamp));\n\n       return function cleanup(){\n        \n       }\n\n  },[])\n\n  const makechart2 = () => {\n    var data = [];\n    var labels=[]\n    var cnts=[]\n\n    if(timestamp.sd === undefined) return;\n    timestamp.sd.map((dd,key)=>{\n      if(dd.roi === '13' && dd.dsc === 'TRE'){\n        dd.dsc='TRE-NO';\n        dd.pnm = 'Tresurer-NO';\n      } else if (dd.roi === '13' && dd.dsc === 'PRC') {\n\n        dd.dsc='PRC-NO';\n        dd.pnm = 'Procurement Officer-NO';\n\n      } else if (dd.roi === '13' && dd.dsc === 'WLF') {\n        dd.dsc='WLF-NO';\n        dd.pnm = 'Welfare Chairman-NO';\n      }\n      data.push({cnt:dd.cnt,dsc:dd.dsc,pnm:dd.pnm,pct:dd.pct})\n      labels.push(dd.dsc)\n      cnts.push(dd.cnt)\n    })\n    \n    return {data, labels,cnts}\n  }\n\n  // const colors = (value) => {\n\n  //   let color = {\n  //     \"PRZ\":\"info\",\n  //     \"VPZ\":\"info\",\n  //     \"WOC\":\"warning\",\n  //     \"SEC\":\"info\", \n  //     \"TRE\":\"success\",\n  //     \"PRO\":\"warning\",\n  //     \"WLF\":\"info\",\n  //     \"ORG\":\"success\",\n  //     \"PRC\":\"warning\"\n  //   }\n\n  //   return color[value];\n  // }\n\n  return (\n    <>\n      <WidgetsDropdown data = { timestamp }/>\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardHeader>\n              Vote Summaries 1\n            </CCardHeader>\n            <CCardBody>\n              <CRow>\n                <CCol xs=\"12\" md=\"6\" xl=\"6\">\n\n                  <CRow>\n                    <CCol sm=\"6\">\n                      <CCallout color=\"info\">\n                        <small className=\"text-muted\">Total Voters</small>\n                        <br />\n                        <strong className=\"h4\">{timestamp.tt ? timestamp.tt.pct : (0).toString()}</strong>\n                      </CCallout>\n                    </CCol>\n                    <CCol sm=\"6\">\n                      <CCallout color=\"danger\">\n                        <small className=\"text-muted\">Total Votes Cast</small>\n                        <br />\n                        <strong className=\"h4\">{timestamp.tt ? timestamp.tt.cnt : (0).toString()}</strong>\n                      </CCallout>\n                    </CCol>\n                  </CRow>\n\n                  <hr className=\"mt-0\" />\n                </CCol>\n\n                <CCol xs=\"12\" md=\"6\" xl=\"6\">\n\n                  <CRow>\n                    <CCol sm=\"6\">\n                      <CCallout color=\"warning\">\n                        <small className=\"text-muted\">Total Valid Votes</small>\n                        <br />\n                        <strong className=\"h4\">{timestamp.tt ? timestamp.tt.roi : (0).toString()}</strong>\n                      </CCallout>\n                    </CCol>\n                    <CCol sm=\"6\">\n                      <CCallout color=\"success\">\n                        <small className=\"text-muted\">Total Non Valid Votes</small>\n                        <br />\n                        <strong className=\"h4\">{timestamp.tt ? timestamp.tt.cnt : (0).toString()}</strong>\n                      </CCallout>\n                    </CCol>\n                  </CRow>\n\n                  <hr className=\"mt-0\" />\n\n                  {/* <div className=\"progress-group mb-4\">\n                    <div className=\"progress-group-header\">\n                      <CIcon className=\"progress-group-icon\" name=\"cil-user\" />\n                      <span className=\"title\">Male</span>\n                      <span className=\"ml-auto font-weight-bold\">43%</span>\n                    </div>\n                    <div className=\"progress-group-bars\">\n                      <CProgress className=\"progress-xs\" color=\"warning\" value=\"43\" />\n                    </div>\n                  </div>\n                  <div className=\"progress-group mb-5\">\n                    <div className=\"progress-group-header\">\n                      <CIcon className=\"progress-group-icon\" name=\"cil-user-female\" />\n                      <span className=\"title\">Female</span>\n                      <span className=\"ml-auto font-weight-bold\">37%</span>\n                    </div>\n                    <div className=\"progress-group-bars\">\n                      <CProgress className=\"progress-xs\" color=\"warning\" value=\"37\" />\n                    </div>\n                  </div>\n                  <div className=\"progress-group\">\n                    <div className=\"progress-group-header\">\n                      <CIcon className=\"progress-group-icon\" name=\"cil-globe-alt\" />\n                      <span className=\"title\">Organic Search</span>\n                      <span className=\"ml-auto font-weight-bold\">191,235 <span className=\"text-muted small\">(56%)</span></span>\n                    </div>\n                    <div className=\"progress-group-bars\">\n                      <CProgress className=\"progress-xs\" color=\"success\" value=\"56\" />\n                    </div>\n                  </div>\n\n\n                  <div className=\"progress-group\">\n                    <div className=\"progress-group-header\">\n                      <CIcon name=\"cib-facebook\" className=\"progress-group-icon\" />\n                      <span className=\"title\">Facebook</span>\n                      <span className=\"ml-auto font-weight-bold\">51,223 <span className=\"text-muted small\">(15%)</span></span>\n                    </div>\n                    <div className=\"progress-group-bars\">\n                      <CProgress className=\"progress-xs\" color=\"success\" value=\"15\" />\n                    </div>\n                  </div>\n                  <div className=\"progress-group\">\n                    <div className=\"progress-group-header\">\n                      <CIcon name=\"cib-twitter\" className=\"progress-group-icon\" />\n                      <span className=\"title\">Twitter</span>\n                      <span className=\"ml-auto font-weight-bold\">37,564 <span className=\"text-muted small\">(11%)</span></span>\n                    </div>\n                    <div className=\"progress-group-bars\">\n                      <CProgress className=\"progress-xs\" color=\"success\" value=\"11\" />\n                    </div>\n                  </div>\n                  <div className=\"progress-group\">\n                    <div className=\"progress-group-header\">\n                      <CIcon name=\"cib-linkedin\" className=\"progress-group-icon\" />\n                      <span className=\"title\">LinkedIn</span>\n                      <span className=\"ml-auto font-weight-bold\">27,319 <span className=\"text-muted small\">(8%)</span></span>\n                    </div>\n                    <div className=\"progress-group-bars\">\n                      <CProgress className=\"progress-xs\" color=\"success\" value=\"8\" />\n                    </div>\n                  </div>\n                  <div className=\"divider text-center\">\n                    <CButton color=\"link\" size=\"sm\" className=\"text-muted\">\n                      <CIcon name=\"cil-options\" />\n                    </CButton>\n                  </div> */}\n\n                </CCol>\n              </CRow>\n              <br />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <CRow>\n        <CCol>\n          <CCard>\n            <CCardHeader>\n              Vote Summaries 2\n            </CCardHeader>\n            <CCardBody>\n              <CRow>\n              { makechart2() &&\n              makechart2().data.map((dd,key) => <CCol xs=\"12\" md=\"6\" xl=\"6\" className=\"mb-sm-2 mb-0\" key={key}>\n              <div className=\"progress-group-prepend\">\n                      <span className=\"progress-group-text\">\n                        { dd.pnm }\n                      </span>\n                    </div>\n                    <div className=\"progress-group-bars\">\n                      { dd.cnt } which is {(dd.cnt/timestamp.tt.pct).toFixed(2)}%\n                      <CProgress className=\"progress-xs\" color={\"info\"} value={dd.cnt} />\n                      <CProgress className=\"progress-xs\" color=\"danger\" value=\"100\" />\n                    </div>\n            </CCol>)\n            }\n            <hr className=\"mt-0\" />\n                  \n                  <div className=\"legend text-center\">\n                    <small>\n                      <sup className=\"px-1\"><CBadge shape=\"pill\" color=\"info\">&nbsp;</CBadge></sup>\n                      Current Votes\n                      &nbsp;\n                      <sup className=\"px-1\"><CBadge shape=\"pill\" color=\"danger\">&nbsp;</CBadge></sup>\n                      Expected Votes ({ timestamp.tt ? timestamp.tt.pct : 0})\n                    </small>\n                  </div>\n                \n\n              </CRow>\n              <br />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <CCard>\n        <CCardBody>\n          <CRow>\n            <CCol sm=\"5\">\n              <h4 id=\"traffic\" className=\"card-title mb-0\">Votes Distributions</h4>\n              <div className=\"small text-muted\">August 2020</div>\n            </CCol>\n            <CCol sm=\"7\" className=\"d-none d-md-block\">\n              {/* <CButton color=\"primary\" className=\"float-right\">\n                <CIcon name=\"cil-cloud-download\"/>\n              </CButton> */}\n              {/* <CButtonGroup className=\"float-right mr-3\">\n                {\n                  ['Day', 'Month', 'Year'].map(value => (\n                    <CButton\n                      color=\"outline-secondary\"\n                      key={value}\n                      className=\"mx-0\"\n                      active={value === 'Month'}\n                    >\n                      {value}\n                    </CButton>\n                  ))\n                }\n              </CButtonGroup> */}\n            </CCol>\n          </CRow>\n          <MainChartExample style={{height: '300px', marginTop: '40px'}} data = {makechart2()}/>\n        </CCardBody>\n      </CCard>\n\n      {/* <WidgetsBrand withCharts/> */}\n\n    </>\n  )\n}\n\nexport default InitDashboard\n"],"sourceRoot":""}